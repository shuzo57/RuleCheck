# routes.py
import hashlib
import logging
import os
from io import BytesIO
from typing import List, Optional

from app.core.settings import settings
from app.crud import (bulk_create_analysis_items, create_analysis, create_file,
                      delete_file, get_analysis_with_items, get_file,
                      get_latest_analysis, list_analyses_by_file, list_files)
from app.db import get_db
from app.models import Analysis, AnalysisItemRow
from app.services.analysis import analyze_xml
from app.services.pptx_parser import PptxConverter
from app.services.schemas import (AnalysisItem, AnalysisItemCreate,
                                  AnalysisItemUpdate)
from fastapi import APIRouter, Depends, File, Form, HTTPException, UploadFile
from fastapi.responses import JSONResponse, Response
from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)
router = APIRouter()

FAKE_USER_ID = "localuser"


@router.get("/health")
def health():
    return {"status": "ok"}


def _sha256(b: bytes) -> str:
    h = hashlib.sha256()
    h.update(b)
    return h.hexdigest()


@router.post("/files")
async def upload_file(file: UploadFile = File(...), db: Session = Depends(get_db)):
    if not (file.filename or "").lower().endswith(".pptx"):
        raise HTTPException(400, "pptx 繝輔ぃ繧､繝ｫ繧偵い繝・・繝ｭ繝ｼ繝峨＠縺ｦ縺上□縺輔＞縲・)

    data = await file.read()
    digest = _sha256(data)
    rel_path = f"{digest[:2]}/{digest}.pptx"
    abs_path = os.path.join(settings.STORAGE_DIR, rel_path)
    os.makedirs(os.path.dirname(abs_path), exist_ok=True)
    with open(abs_path, "wb") as f:
        f.write(data)

    rec = create_file(
        db,
        user_id=FAKE_USER_ID,
        filename=file.filename,
        path=rel_path,
        sha256=digest,
        size_bytes=len(data),
    )
    return {
        "file_id": rec.id,
        "filename": rec.filename,
        "size_bytes": rec.size_bytes,
        "sha256": rec.sha256
    }


@router.get("/files")
def get_files(db: Session = Depends(get_db)):
    files = list_files(db, user_id=FAKE_USER_ID)
    result = []
    for f in files:
        # 縺昴・繝輔ぃ繧､繝ｫ縺ｮ譛譁ｰ隗｣譫舌′縺ゅｋ縺九ｒ隕九ｋ・育ｰ｡譏灘ｮ溯｣・ｼ壼ｭ伜惠縺吶ｌ縺ｰ success縲√↑縺代ｌ縺ｰ pending・・        analyses = list_analyses_by_file(db, file_id=f.id, user_id=FAKE_USER_ID)
        status = "success" if len(analyses) > 0 else "pending"
        result.append({
            "id": str(f.id),
            "file": None,
            "name": f.filename,
            "size": f.size_bytes,
            "uploadDate": f.created_at.isoformat(),
            "status": status,
            "analysisResult": [],   # 荳隕ｧ縺ｧ縺ｯ霑斐＆縺ｪ縺・ｼ郁ｩｳ邏ｰAPI縺ｧ蜿門ｾ暦ｼ・            "error": None,
            "isBasisAugmented": False,
            "augmentationStatus": "idle",
        })
    return result



@router.delete("/files/{file_id}")
def remove_file(file_id: int, db: Session = Depends(get_db)):
    f = get_file(db, file_id)
    if not f or f.user_id != FAKE_USER_ID:
        raise HTTPException(404, "not found")
    try:
        os.remove(os.path.join(settings.STORAGE_DIR, f.path))
    except FileNotFoundError:
        pass
    delete_file(db, file_id)
    return {"ok": True}


@router.post("/pptx/xml")
async def pptx_to_xml(file: UploadFile = File(...), pretty: Optional[bool] = Form(True)):
    if not (file.filename or "").lower().endswith(".pptx"):
        raise HTTPException(400, "pptx 繝輔ぃ繧､繝ｫ繧偵い繝・・繝ｭ繝ｼ繝峨＠縺ｦ縺上□縺輔＞縲・)
    data = await file.read()
    bio = BytesIO(data)
    bio.seek(0)
    xml_str = PptxConverter.convert_to_xml(bio, pretty=bool(pretty))
    return Response(content=xml_str, media_type="application/xml")


# @router.post("/analyze", response_model=List[AnalysisItem])
# async def analyze(
#     file_id: int = Form(...),
#     rules: Optional[str] = Form(None),
#     db: Session = Depends(get_db),
# ):
#     f = get_file(db, file_id)
#     if not f or f.user_id != FAKE_USER_ID:
#         raise HTTPException(404, "file not found")

#     abs_path = os.path.join(settings.STORAGE_DIR, f.path)
#     xml_str = PptxConverter.convert_to_xml(abs_path, pretty=False)

#     try:
#         items = analyze_xml(xml_str, rules)
#         # correctionType 縺檎┌縺・ｴ蜷医・譌｢螳壹〒縲御ｻｻ諢上阪↓謠・∴繧・#         for i in items:
#             if getattr(i, "correctionType", None) is None:
#                 setattr(i, "correctionType", "莉ｻ諢・)
#         payload = [i.model_dump() for i in items]

#         analysis = create_analysis(
#             db,
#             user_id=FAKE_USER_ID,
#             file_id=file_id,
#             model="gemini-2.5-flash",
#             rules_version=None,
#             result_json=payload,
#         )
#         bulk_create_analysis_items(db, analysis_id=analysis.id, items=items)

#         return JSONResponse(content=payload, headers={"X-Analysis-Id": str(analysis.id)})
#     except Exception as e:
#         logger.exception("analyze failed")
#         raise HTTPException(500, f"隗｣譫舌↓螟ｱ謨励＠縺ｾ縺励◆: {e}")

@router.post("/analyze", response_model=List[AnalysisItem])
async def analyze(
    file_id: int = Form(...),
    rules: Optional[str] = Form(None),
    db: Session = Depends(get_db),
):
    f = get_file(db, file_id)
    if not f or f.user_id != FAKE_USER_ID:
        raise HTTPException(404, "file not found")

    abs_path = os.path.join(settings.STORAGE_DIR, f.path)
    xml_str = PptxConverter.convert_to_xml(abs_path, pretty=False)

    try:
        items = [
            AnalysisItem(
                slideNumber=1,
                category="隱､讀・,
                basis="1",
                issue="縲後％繧薙↑莠九ｒ繧区ぅ閠・＆繧薙′繧医￥縺・∪縺吶阪→縺・≧陦ｨ迴ｾ縺ｯ縲∝勧隧槭・菴ｿ縺・婿縺ｫ隱､繧翫′縺ゅｋ繧医≧縺ｫ隕句女縺代ｉ繧後∪縺吶りｪｭ閠・↓驕募柱諢溘ｒ荳弱∴繧句庄閭ｽ諤ｧ縺後＃縺悶＞縺ｾ縺吶・,
                suggestion="縲後％繧薙↑縺薙→繧定ｨ縺・ぅ閠・＆繧薙′繧医￥縺・∪縺吶阪↑縺ｩ縲∬・辟ｶ縺ｪ陦ｨ迴ｾ縺ｸ縺比ｿｮ豁｣縺・◆縺縺代∪縺吶→蟷ｸ縺・〒縺吶・,
                correctionType="蠢・・
            ),
            AnalysisItem(
                slideNumber=1,
                category="陦ｨ迴ｾ",
                basis="2",
                issue="縲後が繝ｳ繧ｰ繝ｪ繧ｶ縺ｨ縺・≧邉門ｰｿ逞・ｲｻ逋ょ王縺後≠繧翫∪縺吶ｈ縲阪→縺・≧陦ｨ迴ｾ縺ｫ縺､縺・※縲∬｣ｽ蜩∝錐縺ｮ逶ｴ謗･逧・↑險倩ｼ峨・阮ｬ讖滓ｳ穂ｸ翫∝ｺ・相縺ｨ隕九↑縺輔ｌ繧句庄閭ｽ諤ｧ縺後＃縺悶＞縺ｾ縺吶・,
                suggestion="縲後し繧ｭ繧ｵ繧ｰ繝ｪ繝励メ繝ｳ・・PP-4髦ｻ螳ｳ阮ｬ・峨阪↑縺ｩ荳闊ｬ蜷阪〒縺ｮ縺碑ｨ倩ｼ峨ｒ謗ｨ螂ｨ縺・◆縺励∪縺吶ょｯｾ雎｡隱ｭ閠・′蛹ｻ逋る未菫り・〒縺ゅｋ縺薙→繧よ・遉ｺ縺・◆縺縺代∪縺吶→螳牙ｿ・〒縺吶・,
                correctionType="蠢・・
            ),
            AnalysisItem(
                slideNumber=1,
                category="蜃ｺ蜈ｸ",
                basis="3",
                issue="譛ｬ繧ｹ繝ｩ繧､繝峨↓縺ｯ蜃ｺ蜈ｸ諠・ｱ繧・ｽ懈・閠・錐縺ｮ險倩ｼ峨′遒ｺ隱阪〒縺阪∪縺帙ｓ縺ｧ縺励◆縲・,
                suggestion="謇ｿ隱肴凾隧穂ｾ｡雉・侭縲∵ｷｻ莉俶枚譖ｸ縲∝ｭｦ陦楢ｫ匁枚縺ｪ縺ｩ縺ｮ蜃ｺ蜈ｸ繧呈・險倥＞縺溘□縺阪∝刈縺医※菴懈・閠・錐繧・園螻槭ｂ縺碑ｨ倩ｼ峨＞縺溘□縺代∪縺吶→縲∬ｳ・侭縺ｮ菫｡鬆ｼ諤ｧ縺御ｸ螻､鬮倥∪繧九°縺ｨ蟄倥§縺ｾ縺吶・,
                correctionType="謗ｨ螂ｨ"
            ),
            AnalysisItem(
                slideNumber=2,
                category="隱､讀・,
                basis="1",
                issue="縲靴18He25N3O2繝ｻH2O縲阪→縺ｮ陦ｨ險倥↓縺､縺・※縲∝・邏險伜捷縺ｫ隱､繧翫′縺ゅｋ繧医≧縺ｧ縺斐＊縺・∪縺吶・,
                suggestion="豁｣縺励￥縺ｯ縲靴18H25N3O2繝ｻH2O縲阪°縺ｨ蟄倥§縺ｾ縺吶ゅ＃遒ｺ隱阪・縺・∴縲√＃菫ｮ豁｣繧偵♀鬘倥＞縺・◆縺励∪縺吶・,
                correctionType="蠢・・
            ),
            AnalysisItem(
                slideNumber=2,
                category="陦ｨ迴ｾ",
                basis="2",
                issue="縲瑚ｻｽ蠎ｦ縺ｮ閧･貅縺ｧ縺ゅ▲縺ｦ繧・邉門ｰｿ逞・′邨ｶ蟇ｾ縺ｫ逋ｺ逞・＠縺ｦ縺励∪縺・阪→縺・≧陦ｨ迴ｾ縺ｯ縲・℃蠎ｦ縺ｫ荳榊ｮ峨ｒ荳弱∴繧句庄閭ｽ諤ｧ縺後＃縺悶＞縺ｾ縺吶・,
                suggestion="縲瑚ｻｽ蠎ｦ縺ｮ閧･貅縺ｧ繧ら匱逞・Μ繧ｹ繧ｯ縺碁ｫ倥∪繧句庄閭ｽ諤ｧ縺後≠繧九阪↑縺ｩ縺ｮ陦ｨ迴ｾ縺ｫ隕狗峩縺励√≠繧上○縺ｦ譬ｹ諡縺ｨ縺ｪ繧区枚迪ｮ繧偵＃謠千､ｺ縺・◆縺縺代∪縺吶→隱ｬ蠕怜鴨縺悟｢励☆縺九→蟄倥§縺ｾ縺吶・,
                correctionType="蠢・・
            ),
            AnalysisItem(
                slideNumber=2,
                category="陦ｨ迴ｾ",
                basis="2",
                issue="縲瑚｡邉門､縺悟柑譫懃噪縺ｫ繧ｳ繝ｳ繝医Ο繝ｼ繝ｫ縺輔ｌ繧九阪→縺・≧陦ｨ迴ｾ縺ｯ縲∝柑譫懊ｒ譁ｭ螳夂噪縺ｫ蜊ｰ雎｡莉倥￠繧区＄繧後′縺斐＊縺・∪縺吶・,
                suggestion="縲瑚｡邉悶さ繝ｳ繝医Ο繝ｼ繝ｫ縺ｮ謾ｹ蝟・′譛溷ｾ・＆繧後ｋ縲阪ｄ縲碁｣滉ｺ九・驕句虚逋よｳ輔→菴ｵ逕ｨ縺吶ｋ縺薙→縺ｧ蜉ｹ譫懊′隕玖ｾｼ縺ｾ繧後ｋ縲阪→縺・▲縺溘∵・驥阪↑陦ｨ迴ｾ縺ｸ縺ｮ菫ｮ豁｣繧偵♀蜍ｧ繧√＞縺溘＠縺ｾ縺吶・,
                correctionType="謗ｨ螂ｨ"
            ),
            AnalysisItem(
                slideNumber=2,
                category="蜃ｺ蜈ｸ",
                basis="3",
                issue="譛ｬ繧ｹ繝ｩ繧､繝峨↓繧ゅ∝・蜈ｸ繧・ｽ懈・閠・・險倩ｼ峨′隕句女縺代ｉ繧後∪縺帙ｓ縺ｧ縺励◆縲・,
                suggestion="豺ｻ莉俶枚譖ｸ繧ПMDA雉・侭縲∵渊隱ｭ莉倥″隲匁枚縺ｪ縺ｩ縲∽ｿ｡鬆ｼ諤ｧ縺ｮ鬮倥＞蜃ｺ蜈ｸ繧呈・險倥＞縺溘□縺上％縺ｨ縺ｧ縲∬ｳ・侭縺ｮ豁｣遒ｺ諤ｧ縺後ｈ繧贋ｸ螻､鬮倥∪繧九ｂ縺ｮ縺ｨ蟄倥§縺ｾ縺吶・,
                correctionType="謗ｨ螂ｨ"
            )
        ]


        payload = [i.model_dump() for i in items]

        analysis = create_analysis(
            db,
            user_id=FAKE_USER_ID,
            file_id=file_id,
            model="mock",              # 竊・gemini 縺ｧ縺ｯ縺ｪ縺・"mock" 縺ｨ縺励※菫晏ｭ・            rules_version=None,
            result_json=payload,
        )
        bulk_create_analysis_items(db, analysis_id=analysis.id, items=items)

        return JSONResponse(content=payload, headers={"X-Analysis-Id": str(analysis.id)})
    except Exception as e:
        logger.exception("analyze failed")
        raise HTTPException(500, f"隗｣譫舌↓螟ｱ謨励＠縺ｾ縺励◆: {e}")

@router.get("/files/{file_id}/analyses")
def list_analyses(file_id: int, db: Session = Depends(get_db)):
    f = get_file(db, file_id)
    if not f or f.user_id != FAKE_USER_ID:
        raise HTTPException(404, "not found")
    lst = list_analyses_by_file(db, file_id=file_id, user_id=FAKE_USER_ID)
    return [
        {
            "id": a.id,
            "created_at": str(a.created_at),
            "model": a.model,
            "status": a.status,
            "items_count": len(a.items),
        }
        for a in lst
    ]


@router.get("/analyses/{analysis_id}")
def get_analysis(analysis_id: int, db: Session = Depends(get_db)):
    a, rows = get_analysis_with_items(db, analysis_id)
    if not a or a.user_id != FAKE_USER_ID:
        raise HTTPException(404, "analysis not found")

    return {
        "id": a.id,
        "file_id": a.file_id,
        "created_at": str(a.created_at),
        "model": a.model,
        "status": a.status,
        "rules_version": a.rules_version,
        "result_json": a.result_json,
        "items": [
            {
                "id": r.id,
                "slideNumber": r.slide_number,
                "category": r.category,
                "basis": r.basis,
                "issue": r.issue,
                "suggestion": r.suggestion,
                "correctionType": r.correction_type,
            }
            for r in rows
        ],
    }


@router.post("/files/{file_id}/analyses/latest/items")
def add_item_to_latest_analysis(
    file_id: int,
    item: AnalysisItemCreate,
    db: Session = Depends(get_db),
):
    f = get_file(db, file_id)
    if not f or f.user_id != FAKE_USER_ID:
        raise HTTPException(404, "file not found")

    analyses = list_analyses_by_file(db, file_id=file_id, user_id=FAKE_USER_ID)
    if analyses:
        a = analyses[0]
    else:
        a = create_analysis(
            db,
            user_id=FAKE_USER_ID,
            file_id=file_id,
            model="manual-edit",
            rules_version=None,
            result_json=[],
        )

    row = AnalysisItemRow(
        analysis_id=a.id,
        slide_number=item.slideNumber,
        category=item.category,
        basis=item.basis,
        issue=item.issue,
        suggestion=item.suggestion,
        correction_type=item.correctionType or "莉ｻ諢・,
    )
    db.add(row)
    db.commit()
    db.refresh(row)
    return {
        "id": row.id,
        "slideNumber": row.slide_number,
        "category": row.category,
        "basis": row.basis,
        "issue": row.issue,
        "suggestion": row.suggestion,
        "correctionType": row.correction_type,
    }


@router.patch("/analysis-items/{item_id}")
def update_analysis_item(
    item_id: int,
    patch: AnalysisItemUpdate,
    db: Session = Depends(get_db),
):
    row = db.get(AnalysisItemRow, item_id)
    if not row:
        raise HTTPException(404, "item not found")
    # Permission: ensure owner matches
    if not row.analysis or row.analysis.user_id != FAKE_USER_ID:
        raise HTTPException(403, "forbidden")

    if patch.slideNumber is not None:
        row.slide_number = patch.slideNumber
    if patch.category is not None:
        row.category = patch.category
    if patch.basis is not None:
        row.basis = patch.basis
    if patch.issue is not None:
        row.issue = patch.issue
    if patch.suggestion is not None:
        row.suggestion = patch.suggestion
    if patch.correctionType is not None:
        row.correction_type = patch.correctionType

    db.add(row)
    db.commit()
    db.refresh(row)
    return {
        "id": row.id,
        "slideNumber": row.slide_number,
        "category": row.category,
        "basis": row.basis,
        "issue": row.issue,
        "suggestion": row.suggestion,
        "correctionType": row.correction_type,
    }


@router.delete("/analysis-items/{item_id}")
def delete_analysis_item(item_id: int, db: Session = Depends(get_db)):
    row = db.get(AnalysisItemRow, item_id)
    if not row:
        raise HTTPException(404, "item not found")
    if not row.analysis or row.analysis.user_id != FAKE_USER_ID:
        raise HTTPException(403, "forbidden")
    db.delete(row)
    db.commit()
    return {"ok": True}


@router.get("/files/{file_id}/analyses/latest")
def get_latest_analysis_for_file(file_id: int, db: Session = Depends(get_db)):
    latest, items = get_latest_analysis(db, file_id=file_id, user_id=FAKE_USER_ID)
    if not latest:
        raise HTTPException(404, "no analysis found")

    return {
        "id": latest.id,
        "created_at": str(latest.created_at),
        "model": latest.model,
        "status": latest.status,
        "items": [
            {
                "id": r.id,
                "slideNumber": r.slide_number,
                "category": r.category,
                "basis": r.basis,
                "issue": r.issue,
                "suggestion": r.suggestion,
                "correctionType": r.correction_type,
            }
            for r in items
        ],
    }

